Memory Management :::

Java objects reside in an area called the heap.
The heap is created when the JVM starts up and may increase or decrease in size while the application runs.

When the heap becomes full, garbage is collected. During the garbage collection objects that are no longer
used are cleared, thus making space for new objects.

Java methods, thread stacks and native handles are allocated in memory separate from the heap, 
as well as JVM internal data structures. 

Local variables lives on the stack, and allocated memory at method invocation time, and
deallocated memory when method execution got over.

Other data lives in on the HEAP and memory is allocated with new, but never explicitly deallocated.

Java uses automatic memory management.

The Java runtime employs a garbage collector that reclaims the memory occupied by an object once 
it determines that object is no longer accessible.

 


