Object as a Superclass :::

The Object class, in the java.lang package, sits at the top of the class hierarchy tree. 

Every class is a descendant, direct or indirect, of the Object class.

Every class you use or write inherits the instance methods of Object.

You need not use any of these methods, but, if you choose to do so, you 
may need to override them with code that is specific to your class. 


  protected Object clone() throws CloneNotSupportedException
  	Creates and returns a copy of this object.
	If a class, or one of its superclasses, implements the Cloneable interface,
	you can use the clone() method to create a copy from an existing object.
	To create a clone, you write: aCloneableObject.clone();
   	The simplest way to make your class cloneable is to add implements Cloneable 
   	to your class's declaration. then your objects can invoke the clone() method.
   	
  public boolean equals(Object obj)
    Indicates whether some other object is "equal to" this one.
    To test whether two objects are equal in the sense of equivalency
    (containing the same information),you must override the equals() method. 
    Note: If you override equals(), you must override hashCode() as well. 

  protected void finalize() throws Throwable
    Called by the garbage collector on an object when garbage
    collection determines that there are no more references to the object
   	The Object class provides a callback method, finalize(), that may
    be invoked on an object when it becomes garbage. 
    The finalize() method may be called automatically by the system,
    but when it is called, or even if it is called, is uncertain.
   
   
  public final Class getClass()
    Returns the runtime class of an object.
    You cannot override getClass.
   
  public int hashCode()
    Returns a hash code value for the object.
    The value returned by hashCode() is the object's hash code, 
    which is the object's memory address in hexadecimal.
    By definition, if two objects are equal, their hash code must also be equal.
    If you override the equals() method, you change the way two objects are
    equated and Object's implementation of hashCode() is no longer valid.
    Therefore, if you override the equals() method, you must also override
    the hashCode() method as well.
  
  public String toString()
    Returns a string representation of the object.
    The Object's toString() method returns a String representation of the object,
    You can use toString() along with System.out.println() to display
    a text representation of an object.

The notify, notifyAll, and wait methods of Object all play a part in synchronizing
the activities of independently running threads in a program,

    public final void notify()
    public final void notifyAll()
    public final void wait()
    public final void wait(long timeout)
    public final void wait(long timeout, int nanos)

    