Arrays Class :::

public class Arrays extends Object

This class contains various methods for manipulating arrays 
(such as sorting and searching). This class also contains a static factory
that allows arrays to be viewed as lists.

This class is a member of the Java Collections Framework.
Since: 1.2

Method Summary :

static <T> List<T> 	asList(T... a)
Returns a fixed-size list backed by the specified array.

static int binarySearch(char[] a, char key)
SSearches the specified array of chars for the specified value using the binary search algorithm.

static <return type> binarySearch(type[] a, int fromIndex, int toIndex, byte key)
Searches a range of the specified array of bytes for the specified value using the binary search algorithm.

binarySearch method Returns index of the search key, if it is contained in the array; else
otherwise, (-(insertion point) - 1). The insertion point is defined as the point at which the 
key would be inserted into the array.Note that this guarantees that the return value
will be >= 0 if and only if the key is found.

static <return type>[] 	copyOf(type[] original, int newLength)
Copies the specified array, truncating or padding with false (if necessary) so the copy has the specified length.

static <return type>[] copyOfRange(type[] original, int from, int to)
Copies the specified range of the specified array into a new array.

static boolean 	deepEquals(Object[] a1, Object[] a2)
Returns true if the two specified arrays are deeply equal to one another.
It's better to use Arrays.equals() to compare non nested Array and Arrays.deepEquals() to compare nested Array
deepHashCode method is to compare 'nested Array' ie elements of array itself are arrays ie 2D array.

static int 	deepHashCode(Object[] a)
Returns a hash code based on the "deep contents" of the specified array.

static String 	deepToString(Object[] a)
Returns a string representation of the "deep contents" of the specified array.
This method is designed for converting multidimensional arrays to strings. 

static <return type> equals(type[] a, boolean[] a2)
Returns true if the two specified arrays of booleans are equal to one another.

static void fill(type[] a, boolean val)
Assigns the specified boolean value to each element of the specified array of booleans.

static void fill(type[] a, int fromIndex, int toIndex, boolean val)
Assigns the specified boolean value to each element of the specified range of the specified array of booleans.

static int 	hashCode(type[] a)
Returns a hash code based on the contents of the specified array.

static void sort(type[] a)
Sorts the specified array into ascending numerical order.

static void sort(type[] a, int fromIndex, int toIndex)
Sorts the specified range of the array into ascending order.

static <T> void sort(T[] a, Comparator<? super T> c)
Sorts the specified array of objects according to the order induced by the specified comparator.

static <T> void sort(T[] a, int fromIndex, int toIndex, Comparator<? super T> c)
Sorts the specified range of the specified array of objects according to the order induced by the specified comparator.

static String 	toString(boolean[] a)
Returns a string representation of the contents of the specified array.

static String 	toString(type[] a)
Returns a string representation of the contents of the specified array.








