Java Enum Important Points :::
•All java enum implicitly extends java.lang.Enum class that extends Object
 class and implements Serializable and Comparable interfaces, so we can’t extend any class in enum.
 
•Since enum is a keyword, we can’t end package name with it, for
example com.journaldev.enum is not a valid package name.

•Java enum can implement interfaces. As in above enum example,
 it’s implementing Closeable interface.
 
•Java enum constructors are always private.

•We can’t create instance of enum using new operator.

•We can declare abstract methods in java enum, then all the enum fields
 must implement the abstract method. In above example getDetail() is the
  abstract method and all the enum fields have implemented it.
  
•We can define a method in enum and enum fields can override them too.For example, 
toString() method is defined in enum and enum field START has overridden it.
 
•Java enum fields has namespace, we can use enum field only with class name like 
ThreadStates.START
•Enums can be used in switch statement, we will see it in action later on in this tutorial.

•We can extend existing enum without breaking any existing functionality. For
 example, we can add a new field NEW in ThreadStates enum without impacting any existing functionality.
 
•Since enum fields are constants, java best practice is to write them in
 block letters and underscore for spaces. For example EAST, WEST, EAST_DIRECTION etc.
 
•Enum constants are implicitly static and final

•Enum constants are final but it’s variable can still be changed. For example,
 we can use setPriority() method to change the priority of enum constants. We will
  see it in usage in below example.
  
•Since enum constants are final, we can safely compare them using “==” and equals()
 methods. Both will have the same result.
