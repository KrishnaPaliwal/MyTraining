java.util.concurrent.BlockingQueue is a Queue that supports operations that wait for the queue
to become non-empty when retrieving and removing an element, and wait for space to become available
 in the queue when adding an element.
 
BlockingQueue doesn’t accept null values and throw NullPointerException if you try to store 
null value in the queue.
It is not possible to insert null into a BlockingQueue. If you try to insert null, the BlockingQueue will 
throw a NullPointerException. 
BlockingQueue implementations are thread-safe. All queuing methods are atomic in nature and use 
internal locks or other forms of concurrency control.

BlockingQueue interface is part of java collections framework and it’s primarily used for
implementing producer consumer problem. We don’t need to worry about waiting for the space
to be available for producer or object to be available for consumer in BlockingQueue as it’s handled
by implementation classes of BlockingQueue.

Java provides several BlockingQueue implementations such as ArrayBlockingQueue, LinkedBlockingQueue,
 PriorityBlockingQueue, SynchronousQueue etc.
While implementing producer consumer problem, we will use ArrayBlockingQueue implementation and 
following methods are important to know.
•	put(E e): This method is used to insert elements to the queue, if the queue is full 
it waits for the space to be available.
•	E take(): This method retrieves and remove the element from the head of the queue,
 if queue is empty it waits for the element to be available.
 
 BlockingQueue Implementations

Since BlockingQueue is an interface, you need to use one of its implementations to use it. 
The java.util.concurrent package has the following implementations of the BlockingQueue interface (in Java 6): 
•ArrayBlockingQueue
•DelayQueue
•LinkedBlockingQueue
•PriorityBlockingQueue
•SynchronousQueue
 
 
 
