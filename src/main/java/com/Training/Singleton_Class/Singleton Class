
Singleton Class :::

java.lang.Runtime is a Singleton class in Java

A singleton is simply a class that is instantiated exactly once.

Singletons typically represent a system component that is intrinsically unique,
such as the window manager or file system.

Before release 1.5, there were two ways to implement singletons. Both are
based on keeping the constructor private and exporting a public static member to
provide access to the sole instance.

The private constructor is called only once, to initialize the public static final field.

In Java the Singleton pattern will ensure that there is only one instance of a class is 
created in the Java Virtual Machine.It is used to provide global point of access to the object.

In terms of practical use Singleton patterns are used in logging, caches, thread pools, 
configuration settings, device driver objects.
Singleton Class Diagram

    Static member : This contains the instance of the singleton class.
    Private constructor : This will prevent anybody else to instantiate the Singleton class.
    Static public method : This provides the global point of access to the Singleton object and returns the instance to the client calling class.

    FAQs:

Question: Why can’t we use a static class instead of singleton?
Answer:

    One of the key advantages of singleton over static class is that it can implement interfaces and extend classes while the static class cannot (it can extend classes, but it does not inherit their instance members). If we consider a static class it can only be a nested static class as top level class cannot be a static class. Static means that it belongs to a class it is in and not to any instance. So it cannot be a top level class.
    Another difference is that static class will have all its member as static only unlike Singleton.
    Another advantage of Singleton is that it can be lazily loaded whereas static will be initialized whenever it is first loaded.
    Singleton object stores in Heap but, static object stores in stack.
    We can clone the object of Singleton but, we can not clone the static class object.
    Singleton can use the Object Oriented feature of polymorphism but static class cannot.

Question: Can the singleton class be subclassed?
Answer: Frankly speaking singleton is just a design pattern and it can be subclassed. However it is worth to understand the logic or requirement behind subclassing a singleton class as the child class might not inherit the singleton pattern objective by extending the Singleton class. However the subclassing can be prevented by using the final keyword in the class declaration.

Question: Can there be multiple instance of singleton using cloning?
Answer: That was a good catch! What do we do now? To prevent the another instance to be created of the singleton instance we can throw exception from inside the clone() method.

Question: What is the impact if we are creating another instance of singleton using serialization and deserialization?
Answer: When we serialize a class and deserialize it then it creates another instance of the singleton class. Basically as many times as you deserialize the singleton instance it will create multiple instance. Well in this case the best way is to make the singleton as enum. In that way the underlying Java implementation takes care of all the details. If this is not possible then we will need to override the readobject() method to return the same singleton instance.

Question: Which other pattern works with Singleton?
Answer:There are several other pattern like Factory method, builder and prototype pattern which uses Singleton pattern during the implementation.

Question: Which classes in JDK uses singleton pattern?
Answer: java.lang.Runtime : In every Java application there is only one Runtime instance that allows the application to interface with the environment it is running. The getRuntime is equivalent to the getInstance() method of the singleton class.
Uses of Singleton design pattern:

Various usages of Singleton Patterns:

    Hardware interface access: The use of singleton depends on the requirements. However practically singleton can be used in case external hardware resource usage limitation required e.g. Hardware printers where the print spooler can be made a singleton to avoid multiple concurrent accesses and creating deadlock.

    Logger : Similarly singleton is a good potential candidate for using in the log files generation. Imagine an application where the logging utility has to produce one log file based on the messages received from the users. If there is multiple client application using this logging utility class they might create multiple instances of this class and it can potentially cause issues during concurrent access to the same logger file. We can use the logger utility class as a singleton and provide a global point of reference.

    Configuration File: This is another potential candidate for Singleton pattern because this has a performance benefit as it prevents multiple users to repeatedly access and read the configuration file or properties file. It creates a single instance of the configuration file which can be accessed by multiple calls concurrently as it will provide static config data loaded into in-memory objects. The application only reads from the configuration file at the first time and there after from second call onwards the client applications read the data from in-memory objects.

    Cache: We can use the cache as a singleton object as it can have a global point of reference and for all future calls to the cache object the client application will use the in-memory object.
    